buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id "org.sonarqube" version "3.1.1"
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'


version = "${version}"
group = 'cy.jdkdigital.productivebees'
archivesBaseName = 'productivebees'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: mcp_mappings
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                productivebees {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                productivebees {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'productivebees', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                productivebees {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
// sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'mods'
    }
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
    maven {
        name = "JEI Maven"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "HWYLA"
        url "http://maven.tehnut.info/"
    }
    maven {
        url 'https://maven.blamejared.com'
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forgeversion}"

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    compileOnly fg.deobf ("mcjty.theoneprobe:TheOneProbe-${top_version}:api")
    runtime fg.deobf ("mcjty.theoneprobe:TheOneProbe-${top_version}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    compile fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")

    implementation fg.deobf('mods:phosphophyllite-1.16.4:0.3.2-beta')
    implementation fg.deobf('mods:AutoRegLib-1.6:47')
    implementation fg.deobf('mods:cofh_core-1.16.3:1.1.4')
    implementation fg.deobf('mods:thermal_foundation-1.16.3:1.1.4')
    implementation fg.deobf('mods:thermal_expansion-1.16.3:1.1.4')
    implementation fg.deobf('mods:CTM-MC1.16.1:1.1.1.5')
    implementation fg.deobf('mods:Mekanism-1.16.4:10.0.18.445')
    implementation fg.deobf('mods:Cucumber-1.16.4:4.1.6')
    implementation fg.deobf('mods:MysticalAgriculture-1.16.4:4.1.4')
    implementation fg.deobf('mods:biggerreactors-1.16.4:0.3.0')
    implementation fg.deobf('mods:Quark-1.16.4:r2.4')
    implementation fg.deobf('mods:Lollipop-1.16.4:3.2.4')
    implementation fg.deobf('mods:Powah-1.16.4:2.3.9')
    implementation fg.deobf('mods:titanium-1.16.4:3.2.3')
    implementation fg.deobf('mods:industrial-foregoing-1.16.4:3.2.6')
    implementation fg.deobf('mods:create-mc1.16.3:v0.3e')
    implementation fg.deobf('mods:XPFromHarvest-1.16.3:1.2.1')
    implementation fg.deobf('mods:TConstruct-1.16.5:3.0.1')

    implementation fg.deobf('mods:ResourcefulBees1.16.3-1.16.3:0.5.6b')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "Productive Bees",
                "Specification-Vendor": "productivebees",
                "Specification-Version": "1.0", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"productivebees",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "JDKDigital_productive-bees"
        property "sonar.organization", "jdkdigital"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}